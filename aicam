import tensorflow.keras
import numpy as np
import cv2 
from tkinter import *
import time

def reset_list(in_list):
    for i in range(len(in_list)):
        in_list[i]=0

def count_values(in_list,i):
    in_list[i]=in_list[i]+1

def check_count(in_list):
    a=100
    for i in range(len(in_list)):
        if in_list[i] > 25:
            reset_list(in_list)
            a=i
    return a
# 이미지 처리하기
def preprocessing(frame):
#frame_fliped = cv2.flip(frame, 1)
# 사이즈 조정 티쳐블 머신에서 사용한 이미지 사이즈로 변경해준다.
    size = (224, 224)
    frame_resized = cv2.resize(frame, size, interpolation=cv2.INTER_AREA)
    frame_coloured = cv2.cvtColor(frame_resized, cv2.COLOR_BGR2RGB)

# 이미지 정규화
# astype : 속성
    frame_normalized = (frame_coloured.astype(np.float32) / 127.0) - 1

# 이미지 차원 재조정 - 예측을 위해 reshape 해줍니다.
# keras 모델에 공급할 올바른 모양의 배열 생성
    frame_reshaped = frame_normalized.reshape((1, 224, 224, 3))
#print(frame_reshaped)
    return frame_reshaped
    
# 예측용 함수
def predict(frame):
    prediction = model.predict(frame)
    return prediction
    
def opencam():
    global model, result
    # 모델 위치
    model_filename ='C://Users//USER//sjb//keras_model.h5'
    
    # 케라스 모델 가져오기
    model = tensorflow.keras.models.load_model(model_filename)
    
    # 카메라를 제어할 수 있는 객체
    capture = cv2.VideoCapture(0)
    
    # 카메라 길이 너비 조절
    capture.set(cv2.CAP_PROP_FRAME_WIDTH, 500)
    capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 460)
    
    #자료형 생성
    result=''
    to_kor = ('안녕하세요', '나', '빵','먹다', '개', '짖다', '끝', '피자', '보다', '초밥', '좋다', '고양이', '생선')
    lbs = ('hi', 'i', 'bread', 'eat', 'dog', 'bark', 'end', 'pizza', 'better', 'siusi', 'like', 'cat', 'fish')
    val_list = [0 for i in range(13)]

    while True:
        ret, frame = capture.read()

        if  cv2.waitKey(100) > 0:
            return result
            cv2.destroyWindow("VideoFrame")
            break
        
        preprocessed = preprocessing(frame)
        prediction = predict(preprocessed)

        for i in range (0,13):
            if(prediction[0,0] < prediction[0,i]):
                count_values(val_list,i)
                cv2.putText(frame, lbs[i], (0, 25), cv2.FONT_HERSHEY_PLAIN, 1, (0, 0, 0))

        cv2.imshow("VideoFrame", frame)

        index = check_count(val_list)
        if index < 14:
             result = result + to_kor[index]
